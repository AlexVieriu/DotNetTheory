https://learn.microsoft.com/en-us/aspnet/core/fundamentals/http-requests?view=aspnetcore-7.0#consumption-patterns

IHttpClientFactory:
-> configure and create HttpClient instaces in an app

Benefits:
-> provides a central location for naming and configuring logical HttpClient instaces
-> for ex, a client named github could be registered and configured to access Gihub;
a default client ca be registered for general access
-> codifies the concept of outgoing middleware via delegating handlers in HttpClient
-> provides extensions for Polly-based middleware to take advantage of delegating handlers in HttpClient
-> manages the pooling and lifetime of underlying HttpClientMessageHandler instaces
-> automatic management avoid commond DNS(Domain Name System) problems that occur 
when manually managing HttpClient lifetimes
-> adds a configurable logging experience for all requests sent through clients created by factory


1. Consumption patterns

Basic usage			: BaseUsageController.cs
Named clients		: NamedClientsController.cs
Typed clients		: TypedClientsController.cs
Generated clients	: GeneratedClientsController.cs


a. Basic usage
-> it is a good way to refactor an existing app
-> it has no impact on how HttpClient is used


b. Named clients
Good option when:
-> the app requires many distinct uses of HttpClient
-> many HttpClients have different configuration


c. Typed clients
-> provide the same capabilities as named clients without the need to use strings as key
-> provides ItelliSense and compiler help when consuming clients
-> provide a single location to configure and interact with a particular HttpClient
for ex, a single typed client might be used:
	-> for a single backend endpoint
	-> to encapsulate all logic dealing with the endpoint


d. Generated clients
<PackageReference Include="Refit.HttpClientFactory" Version="6.3.2" />

-> covers REST APIs into live interfaces
-> call AddRefitClient to generate a dynamic implementation of an interface, 
which uses HttpClient to make external HTTP calls
-> HttpClientFactory can be used with Refit

-> call AddRefitClient to generate the dynamic implementation and then call 
ConfigureHttpClient to configure the underlying HttpClient


2. Make POST, PUT, and DELETE requests


3. Outgoing request middleware

-> has the concept of delegating handlers that can be linked together for outgoing HTTP requests:
    -> simplifies defining the handlers to apply for each named client
    -> supports registration and chaining of multiple handlers to build an outgoing request middleware pipeline
    -> each of these handlers is able to perform work before and after the outgoing request:
        -> is similar to the inbound middleware pipeline in ASP.NET Core
        -> provides a mechanism to manage cross-cutting concerns around HTTP requests, such as:
            -> caching
            -> error handling
            -> serialization
            -> logging

To create a delegating handler:
-> derive from DelegatingHandler
-> override SendAsync

-- ValidateHeaderHandler.cs --
-> checks if X-API-KEY header is in the request
-> if not, returns BadRequest


-- Program.cs --

Single handler:
builder.Services.AddTransient<ValidateHeaderHandler>();

builder.Services.AddHttpClient("HttpMessageHandler")
    .AddHttpMessageHandler<ValidateHeaderHandler>();


Multiple Handlers:
-> each handlers wraps the next handler until the final HttpClientHandler executes the request

builder.Services.AddTransient<SampleHandler1>();
builder.Services.AddTransient<SampleHandler2>();

builder.Services.AddHttpClient("MultipleHttpMessageHandlers")
    .AddHttpMessageHandler<SampleHandler1>()
    .AddHttpMessageHandler<SampleHandler2>();


4. Use DI in outgoing request middleware

<<<<<<< HEAD
=======
-> when HttpClientFactory creates a new delegating handler, it uses DI to fulfill the 
handler's constructor parameters
-> IHttpClientFactory creates a separate DI scope for each handler, which can lead to 
suprising behavior when a handler consumes a scoped service
>>>>>>> eef3c0fd3f2d1ceab86da74e5c784519ea702763
