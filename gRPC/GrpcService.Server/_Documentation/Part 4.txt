Part4: Bidirectional Streaming
https://www.youtube.com/watch?v=wY4nMSUF9e0&ab_channel=NickChapsas

-- chat.proto --
D:\Projects\DotNetTheory\gRPC\GrpcService.Server\obj\Debug\net7.0\Protos\Chat.cs

syntax ="proto3";

option csharp_namespace = "GrpcService.Server";

import "google/protobuf/timestamp.proto";

package chat;


service Chat{
	rpc SendMessage(stream ClientToServerMessage) returns(stream ServerToClientMessage);
}

message ClientToServerMessage{
	string text = 1;
}

message ServerToClientMessage{
	string text = 1;
	google.protobuf.Timestamp timestamp = 2;
}

-> build to generate gRPC classes
Location : D:\Projects\DotNetTheory\gRPC\GrpcService.Server\obj\Debug\net7.0\Protos\


-- CharService.cs --
public override async Task SendMessage(IAsyncStreamReader<ClientToServerMessage> requestStream,
                                        IServerStreamWriter<ServerToClientMessage> responseStream,
                                        ServerCallContext context)
{
    var clientToServerTask = ClientToServerPingHandlingAsync(requestStream, context);
    var serverToClientTask =  ServerToClientPingAsync(responseStream, context);

    await Task.WhenAll(clientToServerTask, serverToClientTask);
}


private static async Task ServerToClientPingAsync(IServerStreamWriter<ServerToClientMessage> responseStream,
                                                    ServerCallContext context)
{
    var pingCount = 0;
    while (!context.CancellationToken.IsCancellationRequested)
    {
        await responseStream.WriteAsync(new ServerToClientMessage
        {
            Text = $"Server said hi {++pingCount} times",
            Timestamp = Timestamp.FromDateTime(DateTime.UtcNow)
        });
        await Task.Delay(2000);
    }
}

private async Task ClientToServerPingHandlingAsync(IAsyncStreamReader<ClientToServerMessage> requestStream,
                                                    ServerCallContext context)
{app.MapGrpcService<ChatService>();
    while (await requestStream.MoveNext() && !context.CancellationToken.IsCancellationRequested)
    {
        var message = requestStream.Current;
        _logger.LogInformation("The client said: {Message}", message.Text);
    }
}

-- Program.cs --
app.MapGrpcService<ChatService>();