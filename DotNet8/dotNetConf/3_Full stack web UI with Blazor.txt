- - - 3. Full stack web UI with Blazor in .NET 8 (1:31:37)- - -
(https://www.youtube.com/watch?v=YwZdtLEtROA&list=PLdo4fOcmZ0oULyHSPBx-tQzePOYlhvrAU&index=3&ab_channel=dotnet)

Full Stack web UI with Blazor 
	-> static server rendering
	-> enhanced navigation & from handling 
	-> streaming rendering 
	-> enable interactivity per component or page
	-> auto select the render mode at runtime

I. Steve Sanderson 
	-> Type of Blazore projects: Server, WebAssembly, Static Server-side Rnedering(SSR)
	-> Static SSR	
		-> Good for:
			-> scale 
			-> good for sites that are presenting information(read-only sites: blogs, ecommerce, search engines)
			-> navigation (links)
			-> forms
		-> Not Good for:	
			-> rich interactivity (all events handlers)
			-> real-time updates
	-> Demo	
		-> code for the catalog 
		-> how do we tell Blazor to do static blazer rendering 
	-> Features
		a. Streaming SSR 
			-> skip waiting for DB/API calls
				-> fast initial UI render/update
				-> begin loading static resources in parallel
				-> ! requires UI design to make sense
					-> use when data loading is likely to take multiple seconds
		b. Enhanced navigation )
			-> get SPA-like responsiveness without needing a SPA
				-> faster page loads with fewer HTTP requests
				-> retain most DOM elements
				-> enable/disable on any DOM subtree
					-> on by default
					-> consider disabling to reset JS state or navigation to non-Blazor pages 
		c. Static SSR Forms 
			-> accept and validate input on static SSR pages
				-> all capabilities of <form> or EditForm
					-> @onsubmit handlers
					-> anti-forgery protection(CSRF)
					-> server-side validation
				-> same APIs as for interative components 
				-> supports Enhance and works with streaming SSR 
		d. Interactive components
			-> Get full Blazor interactivity, arbitrary events, and real-time updates 
				-> Mark any page/component as Server/WebAssembly/both
				-> Work with enhanced navigation/forms 
					-> Retain interactive state while navigating or refreshing static SSR content
					-> Closes/reopens server circuit automatically
				-> Requires WebSocket connection or WebAssembly payload
		e. Auto mode
			-> Use WebAssembly without the first-download cost
			-> ... then uses WebAssembly on the next visit 
			-> Components must support WebAssembly 
				-> must be in Client project and use API endpoints for data
			
II. New Blazor Web App template (34:43)		
	-> best of Blazor Server & Blazor WebAssembly in one template
	-> quickly get setup with static server rendering & progressive enhancements
	-> easily enable Server, WebAssembly, and Auto interactive render modes
	-> Demo (35:20)

Additional Blazor enhancements in .NET 8
-> QuickGrid
-> Sections
-> Routing
-> Monitor circuit activity
-> Improved authentication

Generate static HTML content with components
-> use components for templating and static HTML rendering
-> render a component directly to a string or stream
-> render outside of the context of ASP.NET Core
-> enable future static site generation support
-> Demo(42:28)
-> new Razor Components using EF(CRUD) (45:30)
-> QuickGrid: https://aspnet.github.io/quickgridsamples/

.Net WebAssembly improvements
-> Jiterpreter: 
	-> 20% faster UI rendering
	-> 2x faster JSON deserialization 
-> hot reaload improvements 
-> web-friendly packaging(Webcil)
-> SIM & exception handling 
-> CSP compatibility

What if you have and existing Web App? (35:35)
Blazor App			-> direct update to .net 8
ASP.NET Core app	-> add blazor pages along the existing .net pages	
MVC Views/Razor Pg	-> use the <component> tag helper					
Minimal API/ MVC Controllers -> return a RazorComponentResult	
JS-based web app	-> use Blazor components as custom elements



		

					