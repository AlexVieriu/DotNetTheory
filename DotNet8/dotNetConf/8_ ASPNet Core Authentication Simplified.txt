-- 8_ ASPNet Core Authentication Simplified --
https://github.com/dotnet/aspnetcore/issues/42158

(Demo)
Secure a web API endpoint
(and consume it from a SPA and/or Blazor WebAssembly app)

Microsoft.AspNetCore.Identity.EntityFrameworkCore
Microsoft.EntityFrameworkCore.InMemory

Create new WEB API Project:

-- Program.cs --
builder.Services.AddAuthorization();
builder.Services.AddDbContext<ApplicationDbContext>(
    options => options.UseInMemoryDatabase("AppDb"));
builder.Services.AddIdentityApiEndpoints<IdentityUser>()
    .AddEntityFrameworkStores<ApplicationDbContext>();

app.MapGet("/weatherforecast", () =>
{
...
})
.WithName("GetWeatherForecast")
.WithOpenApi()
.RequireAuthorization();

app.MapIdentityApi<IdentityUser>();
f
-- Bard --
What is UseInMemoryDatabase? I use the nuget package Microsoft.EntityFrameworkCore.InMemory. 
Give me and example. When i register a new user, where the data is stored using this nuget package.

When you use the UseInMemoryDatabase() method, the database is created in the application's memory upon startup. 
All data is stored in memory during the application's execution. 
When the application is shut down, the database is destroyed, and all data is lost.

If you want to see what is in the request/respons go to the network in the browser.

(12:50) Demo 
-> create a Blazor Web App
    -> Authentication type      : Individual Accounts
    -> Interactive render more  : Auto(Server and WebAssembly)

(23:04) 
Microsoft.AspNetCore.Authentication.MicrosoftAccount
-- Program.cs --
builder.Services.AddAuthentication(options =>
    {
        options.DefaultScheme = IdentityConstants.ApplicationScheme;
        options.DefaultSignInScheme = IdentityConstants.ExternalScheme;
    })
    .AddMicrosoftAccount(microsoftAccountOptions =>
        {
            microsoftAccountOptions.ClientId = builder.Configuration["Authentication:MicrosoftAccount:ClientId"];
            microsoftAccountOptions.ClientSecret = builder.Configuration["Authentication:MicrosoftAccount:ClientSecret"];
        })
    .AddIdentityCookies();